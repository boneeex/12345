# -*- coding: utf-8 -*-

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import sys
import random
import unicodedata
from threading import Thread
import os
from datetime import datetime
import json
import re
# –°–∫–∞—á–∞–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import flask
from flask import request, redirect
import telebot
from telebot import types
# –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
import constants
from DataBase import dbAdapter
from Statistics import statsAdapter
from Logger import logAdapter


bot = telebot.TeleBot("7584084318:AAFSYrF2adJdespKkuGVo5JObVfjx0QLgy4")
bot.threaded = False
# app = flask.Flask(__name__)


def choose_word():
	"""
	–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	:return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç tuple, –≥–¥–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - dict, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–µ, –≤—Ç–æ—Ä–æ–π - markup
	"""
	word = dbAdapter.get_random_word()

	markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
	words_order = [i for i in range(len(word["variants"]))]
	random.shuffle(words_order)
	
	if len(words_order) == 2:
		first = types.KeyboardButton(word["variants"][words_order[0]])
		second = types.KeyboardButton(word["variants"][words_order[1]])
		markup.row(first, second)
	elif len(words_order) == 3:
		first = types.KeyboardButton(word["variants"][words_order[0]])
		second = types.KeyboardButton(word["variants"][words_order[1]])
		third = types.KeyboardButton(word["variants"][words_order[2]])
		markup.row(first, second, third)

	return word, markup


def mailout(text):
	"""
	–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML
	:param text: —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
	"""
	users_id = dbAdapter.get_all_users_id()
	for i in users_id:
		try:
			bot.send_message(i, text, parse_mode="HTML")
		except Exception as e:
			logAdapter.log(str(e))


def strip_accents(s):
	"""
	–£–¥–∞–ª—è–µ—Ç —Å–∏–º–≤–æ–ª —É–¥–∞—Ä–µ–Ω–∏—è
	:param s: —Å–ª–æ–≤–æ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —Å–∏–º–≤–æ–ª —É–¥–∞—Ä–µ–Ω–∏—è
	:return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–æ –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ —É–¥–∞—Ä–µ–Ω–∏—è
	"""
	return "".join(c for c in unicodedata.normalize("NFC", s) if unicodedata.category(c) != "Mn")


# # ~~~~~ Flask ~~~~~
# @app.route("/")
# def main():
# 	return flask.render_template("page.html", stats=statsAdapter.get_stats())


# @app.route("/", methods=["POST"])
# def send():
# 	message = request.form["message"]
# 	password = request.form["password"]
# 	if password == constants.MAILOUT_PASSWORD:
# 		mailout(message)
# 	return redirect("/")


# @app.route('/favicon.ico')
# def favicon():
# 	return flask.send_from_directory(os.path.join(app.root_path, 'static'),
# 	                                 'favicon.ico', mimetype='image/vnd.microsoft.icon')


# @app.route("/api/get")
# def api_get():
# 	return json.dumps(statsAdapter.get_stats())


# ~~~~~ Bot ~~~~~
@bot.message_handler(commands=["start"])
def start(message):
	result = choose_word()
	dbAdapter.create_record(message.chat, result[0]["origin"])
	bot.send_message(message.chat.id, result[0]["origin"], reply_markup=result[1])


@bot.message_handler(commands=["status"])
def status(message):
	data = dbAdapter.get_user(message.chat.id)
	bot.send_message(message.chat.id, "–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {0}\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ: {1}\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {2}".format(data["correct"] +
																									data["incorrect"],
																									data["correct"],
																									data["incorrect"]))


@bot.message_handler(commands=["setname"])
def set_name(message):	
	name = message.text[9:]
	name = re.sub("[\n\t\r/]", "", name)
	if 5 <= len(name) <= 19:
		dbAdapter.set_name(message.chat.id, name)
		bot.send_message(message.chat.id, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è: " + name)
	else:
		bot.send_message(message.chat.id, "–î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 –∏ –Ω–µ –±–æ–ª–µ–µ 19 —Å–∏–º–≤–æ–ª–æ–≤")


@bot.message_handler(commands=["top"])
def top(message):
	top = dbAdapter.get_top_list()
	result = "–¢–æ–ø: (–∏–º—è ‚Äì –ª—É—á—à–∏–π —Å—á—ë—Ç)\n"

	if len(top) == 0:
		result = "–¢–æ–ø: –ø—É—Å—Ç–æ"
	else:
		counter = 1
		for i in top:
			mark = "üèÖ"
			if counter == 1:
				mark = "ü•á"
			elif counter == 2:
				mark = "ü•à"
			elif counter == 3:
				mark = "ü•â"

			result += "{counter} {name} ‚Äì {score}\n".format(counter=mark, name=i[0].rstrip(), score=i[1])
			counter += 1
		
	bot.send_message(message.chat.id, result)


@bot.message_handler(commands=["toperrors"])
def top_errors(message):
	data = dbAdapter.get_top_errors()
	result = "–¢–æ–ø –æ—à–∏–±–æ–∫:\n"
	for i in data:
		result += "‚ùóÔ∏è" + i[0] + "\n"
	bot.send_message(message.chat.id, result)


@bot.message_handler(commands=["help"])
def help(message):
	bot.send_message(message.chat.id, constants.HELP_COMMAND_TEXT)
	

@bot.message_handler(commands=["report"])
def report(message):
	logAdapter.add_report(message.chat.id, message.text[8:])
	bot.send_message(message.chat.id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ")


@bot.message_handler(commands=["myerrors"])
def user_errors(message):
	user_errors = dbAdapter.get_user(message.chat.id)["errors"].replace(" ", "\n")
	bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫:\n" + user_errors)


@bot.message_handler(content_types=["text"])
def check(message):
	# –°–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	user_choice = message.text
	# –ò–Ω—Ñ–æ—Ä–∞—Ü–∏—è –æ —Å–ª–æ–≤–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	word_info = dbAdapter.get_word_info(strip_accents(user_choice))
	# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	user = dbAdapter.get_user(message.chat.id)

	if user is None or user["lastWord"] == "None":
		bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ /start")
	elif word_info is None or user["lastWord"] != word_info["origin"]:
		bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ")
	else:
		# –£–±–∏—Ä–∞–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–ª–æ–≤ –ø–æ–¥—Ä—è–¥
		next_word, next_markup = choose_word()
		while next_word["origin"] in user["severalLastWords"].split():
			next_word, next_markup = choose_word()
			
		if word_info["answer"] == user_choice:
			dbAdapter.update(message.chat.id, "correct", word_info["answer"], next_word["origin"])
			score = dbAdapter.get_score(message.chat.id)

			answer = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –°—á–µ—Ç: {0}\n\n‚û°Ô∏è {1}".format(score["score"], next_word["origin"])
			if len(next_word["comment"]) != 0:
				answer += " " + next_word["comment"]

			bot.send_message(message.chat.id, answer, reply_markup=next_markup)

		else:
			# –ü–æ–ª—É—á–∞–µ–º —Å—á—ë—Ç —Ä–∞–Ω—å—à–µ, —á–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			score = dbAdapter.get_score(message.chat.id)
			dbAdapter.update(message.chat.id, "incorrect", word_info["answer"], next_word["origin"])

			answer = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–æ - {0}\n\nüèÜ –í–∞—à —Å—á–µ—Ç: {1}, –ª—É—á—à–∏–π: {2}\n\n‚û°Ô∏è {3}".format(
					word_info["answer"], score["score"], score["bestScore"], next_word["origin"])
			if len(next_word["comment"]) != 0:
				answer = answer + " " + next_word["comment"]

			bot.send_message(message.chat.id, answer, reply_markup=next_markup)
						
		statsAdapter.update_stats(message.chat.id)


bot.stop_polling()

